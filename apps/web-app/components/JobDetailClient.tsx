'use client';

import { FileText, ListTodo, User, Calendar, Download } from "lucide-react";
import Link from "next/link";
import { useLanguage } from "@/contexts/LanguageContext";
import CopyButton from "./CopyButton";
import ExportButton from "./ExportButton";

// 定义行动项的类型，以便在组件中安全使用
interface ActionItem {
  task: string;
  assignee: string;
  dueDate: string;
}

// 类型守卫函数，用于验证对象是否符合 ActionItem 结构
function isActionItem(item: unknown): item is ActionItem {
  return (
    typeof item === 'object' &&
    item !== null &&
    typeof (item as Record<string, unknown>).task === 'string' &&
    typeof (item as Record<string, unknown>).assignee === 'string' &&
    typeof (item as Record<string, unknown>).dueDate === 'string'
  );
}

// 安全地将 Prisma Json 转换为 ActionItem 数组
function parseActionItems(jsonData: unknown): ActionItem[] {
  if (!Array.isArray(jsonData)) {
    return [];
  }
  
  return jsonData.filter(isActionItem);
}

interface JobDetailClientProps {
  job: {
    id: string;
    fileName: string | null;
    updatedAt: Date;
    analysisResult: {
      summary: string | null;
      actionItems: unknown;
    } | null;
  } | null;
}

export default function JobDetailClient({ job }: JobDetailClientProps) {
  const { t, locale } = useLanguage();

  // 格式化行动项为文本
  const formatActionItemsText = (items: ActionItem[]) => {
    if (items.length === 0) {
      return t.jobDetail.noActionItems;
    }

    return items.map((item, index) => {
      const itemNumber = index + 1;
      const assigneeLabel = locale === 'zh' ? '负责人' : 'Assignee';
      const dueDateLabel = locale === 'zh' ? '截止日期' : 'Due Date';
      
      return `${itemNumber}. ${item.task}\n   ${assigneeLabel}: ${item.assignee}\n   ${dueDateLabel}: ${item.dueDate}`;
    }).join('\n\n');
  };

  // 格式化完整的会议内容
  const formatCompleteContent = (summary: string, items: ActionItem[]) => {
    const summaryTitle = locale === 'zh' ? '会议摘要' : 'Meeting Summary';
    const actionItemsTitle = locale === 'zh' ? '行动项' : 'Action Items';
    const separator = '=' .repeat(50);
    
    let content = `${separator}\n${summaryTitle}\n${separator}\n\n${summary}\n\n`;
    
    if (items.length > 0) {
      content += `${separator}\n${actionItemsTitle}\n${separator}\n\n${formatActionItemsText(items)}`;
    } else {
      content += `${separator}\n${actionItemsTitle}\n${separator}\n\n${t.jobDetail.noActionItems}`;
    }
    
    return content;
  };

  // 格式化为 Markdown 格式
  const formatMarkdownContent = (summary: string, items: ActionItem[], fileName: string, updatedAt: Date) => {
    const summaryTitle = locale === 'zh' ? '会议摘要' : 'Meeting Summary';
    const actionItemsTitle = locale === 'zh' ? '行动项' : 'Action Items';
    const assigneeLabel = locale === 'zh' ? '负责人' : 'Assignee';
    const dueDateLabel = locale === 'zh' ? '截止日期' : 'Due Date';
    const analysisCompletedLabel = locale === 'zh' ? '分析完成于' : 'Analysis completed at';
    
    let markdown = `# ${fileName}\n\n`;
    markdown += `> ${analysisCompletedLabel}: ${updatedAt.toLocaleString()}\n\n`;
    markdown += `## ${summaryTitle}\n\n`;
    markdown += `${summary}\n\n`;
    markdown += `## ${actionItemsTitle}\n\n`;
    
    if (items.length > 0) {
      items.forEach((item, index) => {
        markdown += `### ${index + 1}. ${item.task}\n\n`;
        markdown += `- **${assigneeLabel}**: ${item.assignee}\n`;
        markdown += `- **${dueDateLabel}**: ${item.dueDate}\n\n`;
      });
    } else {
      markdown += `${t.jobDetail.noActionItems}\n\n`;
    }
    
    markdown += `---\n\n`;
    markdown += `*${locale === 'zh' ? '此文档由 Insightful AI 自动生成' : 'This document was automatically generated by Insightful AI'}*\n`;
    
    return markdown;
  };

  // 如果任务不存在，或仍在处理中，显示提示信息
  if (!job || !job.analysisResult) {
    return (
      <div className="flex flex-1 items-center justify-center p-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold">{t.jobDetail.notFound}</h1>
          <p className="mt-2 text-gray-500">
            {t.jobDetail.notFoundDesc}
          </p>
          <Link
            href="/"
            className="mt-4 inline-block rounded-md bg-[#61d0de] px-4 py-2 text-sm font-medium text-white hover:bg-[#4fb3c1] transition-colors"
          >
            {t.nav.backToHome}
          </Link>
        </div>
      </div>
    );
  }

  const { analysisResult } = job;
  // 使用类型安全的解析函数，而不是直接类型断言
  const actionItems: ActionItem[] = parseActionItems(analysisResult.actionItems);

  return (
    <main className="flex-1 p-4 sm:p-6 md:p-8">
      <div className="container mx-auto max-w-4xl">
        {/* 页面标题 */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 break-words">
            {job.fileName}
          </h1>
          <p className="mt-2 text-sm text-gray-500">
            {t.jobDetail.analysisCompletedAt} {new Date(job.updatedAt).toLocaleString()}
          </p>
        </div>

        {/* 会议摘要 */}
        <div className="rounded-xl border bg-white p-6 shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="flex items-center text-2xl font-semibold text-gray-800">
              <FileText className="mr-3 h-6 w-6 text-[#61d0de]" />
              {t.jobDetail.meetingSummary}
            </h2>
            <CopyButton 
              text={analysisResult.summary || t.jobDetail.notFound}
              className="ml-4"
              size="md"
            />
          </div>
          <div className="prose prose-blue max-w-none text-gray-600">
            <p>{analysisResult.summary || "未能生成摘要。"}</p>
          </div>
        </div>

        {/* 行动项 */}
        <div className="mt-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="flex items-center text-2xl font-semibold text-gray-800">
              <ListTodo className="mr-3 h-6 w-6 text-[#4fb3c1]" />
              {t.jobDetail.actionItems}
            </h2>
            {actionItems.length > 0 && (
              <CopyButton 
                text={formatActionItemsText(actionItems)}
                className="ml-4"
                size="md"
              />
            )}
          </div>
          <div className="space-y-4">
            {actionItems.length > 0 ? (
              actionItems.map((item, index) => (
                <div
                  key={index}
                  className="rounded-lg border bg-white p-4 transition-shadow hover:shadow-md relative group"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <p className="font-medium text-gray-900 pr-4">{item.task}</p>
                      <div className="mt-3 flex flex-wrap gap-x-6 gap-y-2 text-sm text-gray-500">
                        <span className="flex items-center">
                          <User className="mr-1.5 h-4 w-4" />
                          <strong>{t.jobDetail.assignee}:</strong>&nbsp;{item.assignee}
                        </span>
                        <span className="flex items-center">
                          <Calendar className="mr-1.5 h-4 w-4" />
                          <strong>{t.jobDetail.dueDate}:</strong>&nbsp;{item.dueDate}
                        </span>
                      </div>
                    </div>
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                      <CopyButton 
                        text={`${item.task}\n${t.jobDetail.assignee}: ${item.assignee}\n${t.jobDetail.dueDate}: ${item.dueDate}`}
                        size="sm"
                      />
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="rounded-lg border-2 border-dashed border-gray-200 p-8 text-center text-gray-500">
                <p>{t.jobDetail.noActionItems}</p>
              </div>
            )}
          </div>
        </div>

        {/* 操作按钮区域 */}
        <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center items-stretch sm:items-center">
          {/* 复制完整会议记录 */}
          <div className="flex items-center justify-between gap-3 px-6 py-3 bg-gradient-to-r from-[#61d0de] to-[#4fb3c1] text-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
            <div className="flex items-center gap-3">
              <FileText className="h-5 w-5 flex-shrink-0" />
              <span className="font-medium text-sm sm:text-base">
                {locale === 'zh' ? '复制完整会议记录' : 'Copy Complete Meeting Record'}
              </span>
            </div>
            <CopyButton 
              text={formatCompleteContent(
                analysisResult.summary || t.jobDetail.notFound,
                actionItems
              )}
              className="bg-white/20 border-white/30 text-white hover:bg-white/30 hover:border-white/50 flex-shrink-0"
              size="sm"
            />
          </div>

          {/* 导出 Markdown */}
          <div className="flex items-center justify-between gap-3 px-6 py-3 bg-gradient-to-r from-[#4fb3c1] to-[#3da6b5] text-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200">
            <div className="flex items-center gap-3">
              <Download className="h-5 w-5 flex-shrink-0" />
              <span className="font-medium text-sm sm:text-base">
                {t.jobDetail.exportMarkdown}
              </span>
            </div>
            <ExportButton 
              content={formatMarkdownContent(
                analysisResult.summary || t.jobDetail.notFound,
                actionItems,
                job.fileName || 'meeting-summary',
                job.updatedAt
              )}
              fileName={job.fileName || 'meeting-summary'}
              className="bg-white/20 border-white/30 text-white hover:bg-white/30 hover:border-white/50 flex-shrink-0"
              size="sm"
            />
          </div>
        </div>
      </div>
    </main>
  );
}